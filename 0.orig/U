/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0.05 0 0);
    
boundaryField
{

    #includeEtc "caseDicts/setConstraintTypes"

    outerSides
    {
        type            overset;
        value		    uniform (0 0 0);
    }

    hole
    {
        name            forcedRotation;
        type            codedFixedValue;
        codeInclude
        #{
            #include "fvCFD.H";
        #};

        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        codeLibs
        #{
            -lmeshTools \
            -lfiniteVolume
        #};

        code
        #{
             const fvMesh& mesh = refCast<const fvMesh>(this->db());
             const label id = mesh.boundary().findPatchID("hole");
             const fvPatch& p = mesh.boundary()[id];
             const polyPatch& pp = p.patch();

             const pointField& oldPoints = mesh.oldPoints();
             
             vectorField oldFc(pp.size());

            forAll(oldFc, i)
            {
                oldFc[i] = pp[i].centre(oldPoints);
            }

             //This is to calculate the centroid of the rigid cylinder and hence the center of rotation
             vector patchCenter = Zero;
             scalar patchArea = VSMALL;

             const surfaceScalarField& magSf = mesh.magSf();
             const surfaceVectorField& Cf = mesh.Cf();

            forAll(pp, facei)
            {
                patchCenter += Cf.boundaryField()[id][facei]*magSf.boundaryField()[id][facei];
                patchArea += magSf.boundaryField()[id][facei];
            }

             reduce(patchCenter, sumOp<vector>());
             reduce(patchArea, sumOp<scalar>());

             patchCenter = patchCenter / patchArea;

             const scalar deltaT = mesh.time().deltaTValue();

             const vector axis = vector(0,0,1); //axis of rotation
              
             const vectorField Up((pp.faceCentres() - oldFc)/deltaT);
             const scalarField om
             (
                 2000*(Up.component(1))
             );

             const vectorField Um
             (
                (-om)*((Cf.boundaryField()[id] - patchCenter) ^ (axis/mag(axis)))
             );

            operator==(Up+Um);

         #};
         value   uniform (0 0 0);

        
    }

    inlet
    {
        type            fixedValue;
        value           uniform (0.05 0 0);
    }

    outlet
    {
        type            zeroGradient;
    }

    topAndBottom
    {
        type            slip;
    }

    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
